<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly  name="System.Core" #>
<#@ import namespace="System.Linq" #>
namespace FeatherVane
{
    public static class NextVaneHandleExtensions
    {
        /// <summary>
        /// Handles a context body with a vane
        /// </summary>
        /// <typeparam name="T">The context type of the Vane</typeparam>
        /// <param name="vane">The vane itself</param>
        /// <param name="body">The body to deliver</param>
        public static void Handle<T>(this NextVane<T> vane, T body)
            where T : class
        {
            var context = new VaneContextImpl<T>(body);

            VaneHandler<T> handler = vane.GetHandler(context);

            handler.Handle(context);
        }

<# for(int i=1; i<=16; i++){
    var tInputArgs = String.Concat(Enumerable.Range(1,i).Select(it=>String.Format(",T{0}",it)));
    var tWheres = String.Join(Environment.NewLine + "            ", Enumerable.Range(1,i).Select(it=>String.Format("where T{0} : class",it)));
    var tArgs = String.Concat(Enumerable.Range(1,i).Select(it=>String.Format(",in T{0}",it)));
    var tParms = String.Join(", ", Enumerable.Range(1,i).Select(it=>String.Format("T{0} ctx{0}",it)));
#>
        /// <summary>
        /// Handles a context body with a vane, supplying additional context
        /// </summary>
        /// <typeparam name="T">The context type of the Vane</typeparam>
        /// <param name="vane">The vane itself</param>
        /// <param name="body">The body to deliver</param>
        public static void Handle<T<#=tInputArgs#>>(this NextVane<T> vane, T body, <#=tParms#>) 
            where T : class
            <#=tWheres#>
        {
            var context = new VaneContextImpl<T>(body);<# for(int j = 1; j <= i; j++){ #> 
            context.GetContext(() => ctx<#=j#>);<# } #>


            VaneHandler<T> handler = vane.GetHandler(context);

            handler.Handle(context);
        }

<# 
}
#>
    }
}